[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "jf_web",
    "section": "",
    "text": "Code\nimport numpy as np\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\n#-------------Base parameters\n\n#Define curve parameters\nperiod    = 50\nn_samples = 100\nsim_duration  = period*10\namp = 3\nx = np.arange(n_samples)*np.pi/period\n\n#Animation parameters\nframe_duration = 50 #milliseconds?\n\n#Define some groups of parameters here as dictionaries\n#  This greatly clarifies later code\n#  plotly takes arguments which are lists of dicts of lists of dicts... confusing\ndef frame_arguments(duration):\n    return {\n        \"frame\": {\"duration\": duration},\n        \"mode\": \"immediate\",\n        \"redraw\": True,\n        \"fromcurrent\": True,\n        \"transition\": {\"duration\": duration, \"easing\": \"linear\"},\n        \"uirevision\": True\n    }\n\n#--------------Meat and potatoes\n\n#Create figure object containing one trace of the desired graph type\nfig = go.Figure(\n        data=[go.Scatter3d(\n            x = [],\n            y = [],\n            z = [],\n            mode = \"lines\",\n            name = \"SineTest\")])\n\n\n#Define the layout of that figure (size, axes ranges, etc.)\nfig.update_layout(\n    template = \"plotly_white\",\n    scene = dict(\n            xaxis=dict(range=[0,2*np.pi], autorange=False),\n            yaxis=dict(range=[-3,3], autorange=False),\n            zaxis=dict(range=[0,2*np.pi], autorange=False)))\n\n#Now customize -- set the background to transparent to pair with theme\nfig.update_layout(plot_bgcolor='rgba(0, 0, 0, 0)',paper_bgcolor='rgba(0, 0, 0, 0)')\n\n\n#Define all frames within the animation\nframes =  [go.Frame(data=[go.Scatter3d(\n                            x=x,\n                            y=amp*np.sin(x+t*np.pi/period),\n                            z=x)],\n                    traces=[0],\n                    name=f\"frame_{t}\")\n                    for t in range(1, sim_duration)]\n\n#Assign said frames to the figure\nfig.update(frames=frames)\n\n#Define the protocols for updating the figure\n#  Here, a button which causes the figure to loop linearly through the frame\nfig.update_layout(\n    updatemenus = [\n        {\n            \"buttons\": [\n                {\n                    \"label\" : \"Play\",\n                    \"method\" : \"animate\", #Affects animation\n                    \"args\" : [None, frame_arguments(frame_duration)]\n                },\n                {\n                    \"label\" : \"Pause\",\n                    \"method\" : \"animate\",\n                    #To FutureJake: This is jank you can't just make a pause button by setting the frame duration to ten billion seconds [FIX]\n                    #  To PastJake: Who's going to stop me?\n                    \"args\" : [None, frame_arguments(1000000000)]\n                }\n            ],\n            #Position/display arguments for the buttons\n            \"y\" : 0.5,\n            \"yanchor\" : \"bottom\",\n            \"xanchor\" : \"center\",\n            \"type\" : \"buttons\"\n        },\n        {\n            \"buttons\": [\n                {\n                    \"label\" : \"Lightmode\",\n                    \"method\" : \"relayout\", #Affects layout attributes\n                    \"args\" : [\"template\", pio.templates[\"plotly_white\"]]\n                },\n                {\n                    \"label\" : \"Darkmode\",\n                    \"method\" : \"relayout\", #Affects layout attributes\n                    \"args\" : [\"template\", pio.templates[\"plotly_dark\"]]\n                }\n            ],\n            \"y\" : 0.4,\n            \"yanchor\" : \"top\",\n            \"xanchor\" : \"center\",\n            \"direction\" : \"down\",\n            \"type\" : \"dropdown\"\n        }\n    ]\n)        \n\n#Finally, render the figure\nfig.show()\n\n\n\n                                                \n\n\n\n\nCode\nimport plotly.graph_objects as go\nimport numpy as np\n\n#Curve parameters\nperiod    = 50\nn_samples = 100\nsim_time  = period*10\n\nx = np.arange(n_samples)*np.pi/period\n\nfig = go.Figure(go.Scatter(x=x, y=np.sin(x), mode='lines', name='Testing Points'))\nfig.update_layout(title='Animation Test',\n                  title_x=0.5,\n                  width=600, height=600, \n                  xaxis_title='time', \n                  yaxis_title='E',\n                  yaxis_range=(-1.5, 1.5),\n                  xaxis_range=(0,2*np.pi),\n                  #defines the play button and animation settings\n                  updatemenus=[dict(buttons = [dict(\n                                               args = [None, {\"frame\": {\"duration\": period, \n                                                                        \"redraw\": False},\n                                                              \"fromcurrent\": True, \n                                                              \"transition\": {\"duration\": 0}}],\n                                               label = \"Play\",\n                                               method = \"animate\")],\n                                type='buttons',\n                                showactive=False,\n                                xanchor='right',\n                                yanchor='top')])\n                                          \nframes= [go.Frame(data=[go.Scatter(x=x, y=np.sin(x+t*np.pi/period))]) for t in range(1, sim_time)]\nfig.update(frames=frames)\n\nfig.show()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "about",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "about_jake.html",
    "href": "about_jake.html",
    "title": "Jake Ferguson",
    "section": "",
    "text": "Jake (he/him) is a PhD Candidate in Geography and Environmental Management at the University of Waterloo. He’s interested in SAR Interferometry, SAR Polarimetry, physics education, and fussing over his website’s plotly renders.\nTo see an image of me, click here\n\n\n\nEducation\nUniversity of Waterloo | Waterloo, CA\nMSc. Physics, Computational Multiphysics Group | August 2019\nUniversity of Waterloo | Waterloo, CA\nBSc. Physics | April 2017\n\n\nSelect pubs\nPolarimetric decomposition of microwave-band freshwater ice SAR data: Review, analysis, and future directions\n\n\n\n\nRecommended Reading\nwhy is this not updating"
  },
  {
    "objectID": "about_jake.html#education",
    "href": "about_jake.html#education",
    "title": "Jake Ferguson",
    "section": "Education",
    "text": "Education\nUniversity of Waterloo | Waterloo, ON MSc. Physics, Computational Multiphysics Group | August 2019\nUniversity of Waterloo | Waterloo, ON BSc. Physics | April 2017"
  },
  {
    "objectID": "about_jake.html#select-pubs",
    "href": "about_jake.html#select-pubs",
    "title": "Jake Ferguson",
    "section": "Select pubs",
    "text": "Select pubs\nPolarimetric decomposition of microwave-band freshwater ice SAR data: Review, analysis, and future directions"
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "contact",
    "section": "",
    "text": "text text text"
  },
  {
    "objectID": "academicons.html",
    "href": "academicons.html",
    "title": "Academicons Quarto Extension",
    "section": "",
    "text": "This extension allows you to use academicons in your Quarto HTML documents. It provides an {{&lt; ai &gt;}} shortcode:\n\nMandatory &lt;icon-name&gt;:\n{{&lt; ai &lt;icon-name&gt; &gt;}}\nOptional &lt;size=...&gt;:\n{{&lt; ai &lt;icon-name&gt; &lt;size=...&gt; &gt;}}\nOptional &lt;color=...&gt;:\n{{&lt; ai &lt;icon-name&gt; &lt;color=...&gt; &gt;}}\n\nFor example:\n\n\n\n\n\n\n\nShortcode\nIcon\n\n\n\n\n{{&lt; ai arxiv &gt;}}\n\n\n\n{{&lt; ai google-scholar &gt;}}\n\n\n\n{{&lt; ai open-access &gt;}}\n\n\n\n{{&lt; ai open-access size=5x &gt;}}\n\n\n\n{{&lt; ai open-access color=red &gt;}}"
  },
  {
    "objectID": "index.html#plotly",
    "href": "index.html#plotly",
    "title": "jf_web",
    "section": "",
    "text": "Code\nimport numpy as np\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\n#-------------Base parameters\n\n#Define curve parameters\nperiod    = 50\nn_samples = 100\nsim_duration  = period*10\namp = 3\nx = np.arange(n_samples)*np.pi/period\n\n#Animation parameters\nframe_duration = 50 #milliseconds?\n\n#Define some groups of parameters here as dictionaries\n#  This greatly clarifies later code\n#  plotly takes arguments which are lists of dicts of lists of dicts... confusing\ndef frame_arguments(duration):\n    return {\n        \"frame\": {\"duration\": duration},\n        \"mode\": \"immediate\",\n        \"redraw\": True,\n        \"fromcurrent\": True,\n        \"transition\": {\"duration\": duration, \"easing\": \"linear\"},\n        \"uirevision\": True\n    }\n\n#--------------Meat and potatoes\n\n#Create figure object containing one trace of the desired graph type\nfig = go.Figure(\n        data=[go.Scatter3d(\n            x = [],\n            y = [],\n            z = [],\n            mode = \"lines\",\n            name = \"SineTest\")])\n\n\n#Define the layout of that figure (size, axes ranges, etc.)\nfig.update_layout(\n    template = \"plotly_white\",\n    scene = dict(\n            xaxis=dict(range=[0,2*np.pi], autorange=False),\n            yaxis=dict(range=[-3,3], autorange=False),\n            zaxis=dict(range=[0,2*np.pi], autorange=False)))\n\n#Now customize -- set the background to transparent to pair with theme\nfig.update_layout(plot_bgcolor='rgba(0, 0, 0, 0)',paper_bgcolor='rgba(0, 0, 0, 0)')\n\n\n#Define all frames within the animation\nframes =  [go.Frame(data=[go.Scatter3d(\n                            x=x,\n                            y=amp*np.sin(x+t*np.pi/period),\n                            z=x)],\n                    traces=[0],\n                    name=f\"frame_{t}\")\n                    for t in range(1, sim_duration)]\n\n#Assign said frames to the figure\nfig.update(frames=frames)\n\n#Define the protocols for updating the figure\n#  Here, a button which causes the figure to loop linearly through the frame\nfig.update_layout(\n    updatemenus = [\n        {\n            \"buttons\": [\n                {\n                    \"label\" : \"Play\",\n                    \"method\" : \"animate\", #Affects animation\n                    \"args\" : [None, frame_arguments(frame_duration)]\n                },\n                {\n                    \"label\" : \"Pause\",\n                    \"method\" : \"animate\",\n                    #To FutureJake: This is jank you can't just make a pause button by setting the frame duration to ten billion seconds [FIX]\n                    #  To PastJake: Who's going to stop me?\n                    \"args\" : [None, frame_arguments(1000000000)]\n                }\n            ],\n            #Position/display arguments for the buttons\n            \"y\" : 0.5,\n            \"yanchor\" : \"bottom\",\n            \"xanchor\" : \"center\",\n            \"type\" : \"buttons\"\n        },\n        {\n            \"buttons\": [\n                {\n                    \"label\" : \"Lightmode\",\n                    \"method\" : \"relayout\", #Affects layout attributes\n                    \"args\" : [\"template\", pio.templates[\"plotly_white\"]]\n                },\n                {\n                    \"label\" : \"Darkmode\",\n                    \"method\" : \"relayout\", #Affects layout attributes\n                    \"args\" : [\"template\", pio.templates[\"plotly_dark\"]]\n                }\n            ],\n            \"y\" : 0.4,\n            \"yanchor\" : \"top\",\n            \"xanchor\" : \"center\",\n            \"direction\" : \"down\",\n            \"type\" : \"dropdown\"\n        }\n    ]\n)        \n\n#Finally, render the figure\nfig.show()\n\n\n\n                                                \n\n\n\n\nCode\nimport plotly.graph_objects as go\nimport numpy as np\n\n#Curve parameters\nperiod    = 50\nn_samples = 100\nsim_time  = period*10\n\nx = np.arange(n_samples)*np.pi/period\n\nfig = go.Figure(go.Scatter(x=x, y=np.sin(x), mode='lines', name='Testing Points'))\nfig.update_layout(title='Animation Test',\n                  title_x=0.5,\n                  width=600, height=600, \n                  xaxis_title='time', \n                  yaxis_title='E',\n                  yaxis_range=(-1.5, 1.5),\n                  xaxis_range=(0,2*np.pi),\n                  #defines the play button and animation settings\n                  updatemenus=[dict(buttons = [dict(\n                                               args = [None, {\"frame\": {\"duration\": period, \n                                                                        \"redraw\": False},\n                                                              \"fromcurrent\": True, \n                                                              \"transition\": {\"duration\": 0}}],\n                                               label = \"Play\",\n                                               method = \"animate\")],\n                                type='buttons',\n                                showactive=False,\n                                xanchor='right',\n                                yanchor='top')])\n                                          \nframes= [go.Frame(data=[go.Scatter(x=x, y=np.sin(x+t*np.pi/period))]) for t in range(1, sim_time)]\nfig.update(frames=frames)\n\nfig.show()"
  }
]