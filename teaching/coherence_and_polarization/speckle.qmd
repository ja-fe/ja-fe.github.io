---
title: Speckle as an interference phenomenon
execute:
    echo: false
website:
    page-navigation: true
---

Let's look an illustrative real-world manifestation of this conceptual framework. SAR images are subject to *speckle*, a type of image distortion or noise which affects pixels in a stochastic, multiplicative way. Why does this occur?

# Image of sar speckle goes here

Consider that the returned wave associated with a given pixel likely isn't the result of a single interation with a single object. If multiple reflectors (or similarly, a continuous reflector) lie within the pixel, then the returned wave is the sum of multiple individual waves.

# Image of multi-object pixel goes here

Let's imagine we have a pixel with two identical point reflectors lying within it. How does the returned wave change as a function of where those reflectors are located?

```{ojs}
chart = {
    const svg = d3.create("svg").attr("viewBox", [0, 0, width, height])

    // define a bounding rectangle
    svg.append("rect")
        .attr("x", width/3)
        .attr("y", stroke_width)
        .attr("width", width/3)
        .attr("height", height - 2*stroke_width)
        .attr("stroke", "black")
        .attr("stroke-width", stroke_width)
        .attr("fill-opacity", 0)

    // define data used for circles
    const circles = d3.range(2).map(i => ({
        x: (i+2) * width / 5,
        y: (i+1) * height / 3,
        index: i, 
    }));

    // define circles as graphic objects
    svg.selectAll("circle")
        .data(circles)
        .join("circle")
            .attr("cx", d => d.x)
            .attr("cy", d => d.y)
            .attr("r", radius)
            .attr("fill", d => d3.schemeCategory10[d.index % 10])
            .attr("id", function(d,i) {return i})
            .call(drag)
        
    return svg.node();
}
```

```{ojs}
// defines how circles change appearance and position in response to cursor drag
drag = {

    // move the circles to cursor position when dragging is active
    function dragged(event, d){
        var newx = event.x;
        if (newx < xbounds[0]) newx = xbounds[0];
        if (newx > xbounds[1]) newx = xbounds[1];
        var newy = event.y;
        if (newy < ybounds[0]) newy = ybounds[0];
        if (newy > ybounds[1]) newy = ybounds[1];
        
        if (d3.select(this).attr('id') == "0") {
            mutable x1 = newx;
            mutable y1 = newy;
        }
        if (d3.select(this).attr('id') == "1") {
            mutable x2 = newx;
            mutable y2 = newy;
        }
        
        d3.select(this).raise().attr("cx", d.x = newx).attr("cy", d.y = newy);
    }

    // map the d3 drag event functionality to these custom functions
    return d3.drag()
        .on("drag", dragged)
}
```

```{ojs}
// mutables
mutable x1=0;
mutable y1=0;
mutable x2=0;
mutable y2=0;
```

```{ojs}
// display variables
stroke_width = 2;
width = 300;
height = 100 + 2*stroke_width;
radius = 6;

// derived display variables
xbounds = [width/3 + radius + 1, 2*width/3 - radius - 1]
ybounds = [ radius + 1  + stroke_width, height - radius - 1 - stroke_width]
```

```{ojs}
//--------------------------------------------------------
// WAVEFORM RENDERS
//--------------------------------------------------------


// wave variables
distance = 400;
NumPoints = 1000;
wavelength = 50;
amplitude = 15;
speed = 10;

// satellite geometry variables
sat_x = -1000;
sat_y = 0
sat_z = 1000;
pixel_width = 1000;

// derived variables
distance_travelled_w1 = Math.sqrt(sat_z**2 + (x1/width*pixel_width - sat_x)**2 + (y1/width*pixel_width - sat_y)**2);
distance_travelled_w2 = Math.sqrt(sat_z**2 + (x2/width*pixel_width - sat_x)**2 + (y2/width*pixel_width - sat_y)**2);
phase_w1 = distance_travelled_w1 / wavelength;
phase_w2 = distance_travelled_w2 / wavelength;

```




```{ojs}
wave1 = {
    var data = [];
    for (var i = 1; i <= NumPoints; i++) {
        var j = i * distance / NumPoints;
        data.push([j , amplitude * Math.sin(j * 2*Math.PI / wavelength + time + phase_w2)]);
    }
    return data;
}
```

```{ojs}
wave2 = {
    var data = [];
    for (var i = 1; i <= NumPoints; i++) {
        var j = i * distance / NumPoints;
        data.push([j , amplitude * Math.sin(j * 2*Math.PI / wavelength + time + phase_w1)]);
    }
    return data;
}
```

```{ojs}
waveSum = {
    var data = [];
    for (var i = 1; i <= NumPoints; i++) {
        var j = i * distance / NumPoints;
        data.push([j , amplitude * Math.sin(j * 2*Math.PI / wavelength + time + phase_w1) + amplitude * Math.sin(j * 2*Math.PI / wavelength + time + phase_w2)]);
    }
    return data;
}
```

```{ojs}
time = {
  let i = 0;
  while (true) {
    i += speed * 0.01;
    yield i
  }
}
```

```{ojs}
r = d3.line()(wave1);
b = d3.line()(wave2);
svg`<svg viewBox="0 -32 400 64">
  <path d="${r}" stroke="red" fill="none" />
  <path d="${b}" stroke="blue" fill="none" />
</svg>`
```

```{ojs}
p = d3.line()(waveSum);
svg`<svg viewBox="0 -64 400 130">
  <path d="${p}" stroke="black" fill="none" />
</svg>`
```

```{ojs}
d3 = require("d3@7")
```